isDict = function(obj) {
	if (typeof obj === "object" && obj instanceof Array === false && obj instanceof Date === false) {
		return true;
	} else {
		return false;
	}
}

branchOut = function(dict) {

	arrOut = [];

	descend = function(dict, keychain = [], count = 0) {
	
        let keys = Object.keys(dict);
		if (count<15) {
			console.log(keychain);
		}
	
        for (key in keys) {
	
            let tempKeychain = JSON.parse(JSON.stringify(keychain));
	
            tempKeychain.push(keys[key]);

	            if (isDict(dict[keys[key]])) {
			count++;
	
                descend(dict[keys[key]], tempKeychain, count);

	            } else if (dict[keys[key]] instanceof Array === true) {

	                tempKeychain.push(dict[keys[key]][0]);

	                arrOut.push(tempKeychain);
	
            } else {

	                tempKeychain.push(dict[keys[key]]);
	
                arrOut.push(tempKeychain);
            
		   }		
		
		}

	}
	
	descend(dict);
	
	return arrOut;

}


url_2 = "https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/counties.json"
var req2 = new XMLHttpRequest();
req2.open('GET', url_2, true);
req2.send();
topology = JSON.parse(req2.response);













["type","Topology"]

["objects","counties","type","GeometryCollection"]

["objects","counties","geometries",{"type":"Polygon","id":5089,"arcs":[[0,1,2,3,4]]}]

["objects","geometries",null]

["objects",null,null]

[null,null]

[null,null]

[null,null]
		





































dictCheck = function(dict) {
	if (isDict(dict) === false) {
		return dict instanceof Array ? dict[0] : dict;
	}
} 





[for key in keys { [keys[key], 

















newBranch = function(dict) {
	if (isDict(dict) === false) {
		return dict instanceof Array ? dict[0] : dict;
	} else {
		let keys = JSON.parse(JSON.stringify(Object.keys(dict)));
		for (key in keys) {
			return [keys[key], newBranch(dict[keys[key]])]
		}	
	}
}














fibonacci = function(n) {
	if (n === 0 || n === 1) {
		return 1
	} else {
		return fibonacci(n-2) + fibonacci(n-1);
	}
} 











["type","Topology"]



["objects","counties","type","GeometryCollection"]



["objects","counties","geometries",{"type":"Polygon","id":5089,"arcs":[[0,1,2,3,4]]}]


["objects","states","type","GeometryCollection"]



["objects","states","geometries",{"type":"MultiPolygon","arcs":[[[2311,2312,2313,-8878,-8877,-7245,7077,-3342,-4561,-4560,-4566,-4565,8387,-7151,-7237,-6913,-6897,-6914,-6915,-6901,8115,-7833,3446,7559,7560,-7551,-7550,3364,3365,3366,3367,3368,3369,-3576,6319,-3582,-3581,5266,-7288,9082,7101,7102,-6857,7103,6513,-4355,-4354,-4353,-7585,7351,7366,7362,8196,8197,8217,8372,8373,-6886,-1633,-1632,-6284,-2415,-2414,0,1,-2375]]],"id":"05"}]



["objects","nation","type","GeometryCollection"]



["objects","nation","geometries",{"type":"MultiPolygon","arcs":[[[9206,8606,8640,5722,8512,8766,7988,6581,9218,8301,7463,6921,3433,7248,3435,3439,7250,3841,7249,3843,7998,7966,6426,9125,6309,6012,8734,8813,8736,6014,6310,9126,6424,7967,6198,6428,7964,6430,6200,6431,3834,9127,6312,6016,8737,8814,8531,7920,4516,9354,3736,8964,4641,5849,8997,7841,8534,9019,4376,8305,3611,9340,3746,5456,9196,8411,8189,9010,8969,3374,2897,9,1430,6239,6452,4160,6451,3753,5767,6989,5951,8381,7699,8382,8278,5771,9307,9401,8777,8811,9160,6144,6748,8119,8612,8825,9279,9009,9122,9006,9105,7402,6986,9106,8061,6981,5860,7470,9099,7468,8055,4919,8752,6103,8057,3035,9204,316,2468,9230,3600,9335,5953,9097,8949,7887,8309,7883,8786,3062,4509,8767,8322,9390,2231,8500,6742,8992,4663,7928,2755,8051,3132,8052,2757,8342,9242,8333,9039,5885,7312,6902,8303,6904,9145,9275,4207,2899,9140,8773,9277,8875,3406,9366,9272,1927,1103,9282,1105,739,7225,7036,8787,990,3855,6796,7205,6794,8653,3557,6410,9402,310,4346,3418,830,9395,2944,178,5449,9043,9323,8575,4662,5788,8558,9268,8718,2846,9229,4242,9165,8948,7959,8758,4204,9235,3982,6137,322,5626,7712,9047,9369,4401,9365,9141,6027,9308,4592,5876,8353,8563,8508,8611,8557,9096,8429,8136,6334,326,733,2553,4201,5979,5442,9348,2636,454,5974,456,3589,5976,6550,8164,5819,8168,8610,8498,6294,6698,9036,6694,9037,7267,3979,7265,9038,6636,5391,6637,6005,9410,474,7759,5462,6728,5649,8551,8603,4010,5970,7203,7786,7202,5972,7137,7664,7625,6281,7417,4370,9045,6568,4007,6269,6274,8453,6271,8456,8041,9115,6265,6528,6211,6529,5983,6327,9209,5824,9258,8780,7060,7232,7050,8656,6717,9295,9384,9016,6184,9265,2175,9201,9278,3453,5856,6547,4361,9232,9409,8212,8880,8599,8549,197,4442,6872,7302,7275,982,8601,8367,3193,9385,6341,9386,8365,4597,8545,9357,8770,4380,6671,9310,7109,6343,7110,4386,9203,8237,8828,8927,9064,7291,5618,5773,8240,6526,7705,6434,8358,9408,6534,8109,8140,8027,8635,8248,7708,8010,2134,9011,9343,7356,7359,8401,7689,2002,5273,5544,5270,5545,5275,5549,5654,6393,6651,6396,6652,9130,9033,8699,9185,7904,9184,7902,9213,4960,8158,7872,9321,8157,4168,8746,9326,8312,7406,5555,8163,3008,149,9371,5523,7653,8075],[1734]],[[2892]],[[2893]],[[2894]],[[3371]],[[3375]],[[8965]],[[8966]],[[5520]],[[5521]],[[7651]],[[320]],[[9370]],[[7984]],[[7985]],[[8638]],[[8639]],[[8764]],[[9219]],[[5447]],[[5450]],[[8304]],[[8576]],[[8577]],[[8771]],[[8872]],[[7785]],[[6530,5985]],[[6337]],[[6338,7107]],[[8329]],[[8330]],[[8331]],[[8332]],[[9281]],[[7501,4163,1579,1348,1351,9363,290,9364,1353,1350,1580,4164,1582,4165,7502,1577,4963,7622,1864,5010,8703,1867,9407,9090,2980,9086,7564,9087,7612,9290,7615,9291,846,2511,1968,2208,9396,9315,7621,4962,1575,7503,4761]],[[292]],[[293]],[[294]],[[296,1346]],[[297,1951]],[[1354]],[[1573,1953]],[[1584,4161]],[[1952]],[[2512]],[[2974]],[[2975]],[[2976]],[[2977]],[[2978]],[[2981]],[[2982]],[[7485]],[[7486]],[[7487]],[[7488]],[[7489]],[[7490]],[[7491]],[[7492]],[[7493]],[[7494]],[[7495]],[[7496]],[[7497]],[[7498]],[[7499]],[[7500]],[[7614]],[[7617]],[[7618]],[[9292]],[[9293]],[[9361]],[[9362]],[[9403]],[[9404]],[[9405]],[[9406]],[[451]],[[3586]],[[5975]],[[5392]],[[7758]],[[5861]],[[8012]],[[8013]],[[8053]],[[8056]],[[9100]],[[5546]],[[5547]],[[5550]],[[5551]],[[5552]],[[5553]],[[6394]],[[8745]],[[3093]],[[3094]],[[3095]],[[3097,9143]],[[7823]],[[7824]],[[9104]],[[9331]],[[5987,9208]],[[3977]],[[5198]]]}]



["arcs",[[60335,57541],[145,-7]]]



["bbox",-56.77775821661018]



["transform","scale",0.009995801851947097]



["transform","translate",-56.77775821661018]

"